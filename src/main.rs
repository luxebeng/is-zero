use std::marker::PhantomData;

use halo2_proofs::{
    arithmetic::Field,
    circuit::{AssignedCell, Chip, Layouter, Region, SimpleFloorPlanner, Value},
    plonk::{Advice, Circuit, Column, ConstraintSystem, Error, Expression, Instance, Selector},
    poly::Rotation,
};

trait NumericInstructions<F: Field>: Chip<F> {
    /// Variable representing a number.
    type Num;

    /// Loads a number into the circuit as a private input.
    fn load_private(&self, layouter: impl Layouter<F>, a: Value<F>) -> Result<Self::Num, Error>;

    fn is_zero(&self, layouter: impl Layouter<F>, a: Self::Num) -> Result<Self::Num, Error>;

    /// Exposes a number as a public input to the circuit.
    fn expose_public(
        &self,
        layouter: impl Layouter<F>,
        num: Self::Num,
        row: usize,
    ) -> Result<(), Error>;
}

/// The chip that will implement our instructions! Chips store their own
/// config, as well as type markers if necessary.
struct FieldChip<F: Field> {
    config: FieldConfig,
    _marker: PhantomData<F>,
}

/// Chip state is stored in a config struct. This is generated by the chip
/// during configuration, and then stored inside the chip.
#[derive(Clone, Debug)]
struct FieldConfig {
    advice: [Column<Advice>; 2],
    instance: Column<Instance>,
    s_is_zero: Selector,
}

impl<F: Field> FieldChip<F> {
    fn construct(config: <Self as Chip<F>>::Config) -> Self {
        Self {
            config,
            _marker: PhantomData,
        }
    }

    fn configure(
        meta: &mut ConstraintSystem<F>,
        advice: [Column<Advice>; 2],
        instance: Column<Instance>,
    ) -> <Self as Chip<F>>::Config {
        meta.enable_equality(instance);
        for column in &advice {
            meta.enable_equality(*column);
        }
        let s_is_zero = meta.selector();

        // Define our is_zero gate!
        meta.create_gate("is_zero", |meta| {
            // To implement is_zero, we need three advice cells and a selector
            // cell. We arrange them like so:
            //
            // |  a0  |   a1   | s_is_zero |
            // |------|--------|-----------|
            // |  in  | invert | s_is_zero |
            // |  out |        |           |
            //
            let input = meta.query_advice(advice[0], Rotation::cur());
            let invert = meta.query_advice(advice[1], Rotation::cur());
            let out = meta.query_advice(advice[0], Rotation::next());
            let is_zero = meta.query_selector(s_is_zero);

            // The polynomial expressions returned from `create_gate` will be
            // constrained by the proving system to equal zero.
            vec![
                is_zero.clone()
                    * input.clone()
                    * (Expression::Constant(F::ONE) - input.clone() * invert.clone()),
                is_zero * (Expression::Constant(F::ONE) - input * invert - out),
            ]
        });

        FieldConfig {
            advice,
            instance,
            s_is_zero,
        }
    }
}

impl<F: Field> Chip<F> for FieldChip<F> {
    type Config = FieldConfig;
    type Loaded = ();

    fn config(&self) -> &Self::Config {
        &self.config
    }

    fn loaded(&self) -> &Self::Loaded {
        &()
    }
}

/// A variable representing a number.
#[derive(Clone)]
struct Number<F: Field>(AssignedCell<F, F>);

impl<F: Field> NumericInstructions<F> for FieldChip<F> {
    type Num = Number<F>;

    fn load_private(
        &self,
        mut layouter: impl Layouter<F>,
        value: Value<F>,
    ) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "load private",
            |mut region| {
                region
                    .assign_advice(|| "private input", config.advice[0], 0, || value)
                    .map(Number)
            },
        )
    }

    fn is_zero(&self, mut layouter: impl Layouter<F>, a: Self::Num) -> Result<Self::Num, Error> {
        let config = self.config();

        layouter.assign_region(
            || "is_zero",
            |mut region: Region<'_, F>| {
                config.s_is_zero.enable(&mut region, 0)?;

                a.0.copy_advice(|| "input", &mut region, config.advice[0], 0)?;
                let v = a.0.value().map(|v| v.invert().unwrap_or(F::ZERO));
                region.assign_advice(|| "invert(a)", config.advice[1], 0, || v)?;

                let v =
                    a.0.value()
                        .map(|v| if *v == F::ZERO { F::ONE } else { F::ZERO });
                region
                    .assign_advice(|| "is_zero(a)", config.advice[0], 1, || v)
                    .map(Number)
            },
        )
    }

    fn expose_public(
        &self,
        mut layouter: impl Layouter<F>,
        num: Self::Num,
        row: usize,
    ) -> Result<(), Error> {
        let config = self.config();

        layouter.constrain_instance(num.0.cell(), config.instance, row)
    }
}

#[derive(Default)]
struct MyCircuit<F: Field> {
    a: Value<F>,
}

impl<F: Field> Circuit<F> for MyCircuit<F> {
    // Since we are using a single chip for everything, we can just reuse its config.
    type Config = FieldConfig;
    type FloorPlanner = SimpleFloorPlanner;

    fn without_witnesses(&self) -> Self {
        Self::default()
    }

    fn configure(meta: &mut ConstraintSystem<F>) -> Self::Config {
        // We create the two advice columns that FieldChip uses for I/O.
        let advice = [meta.advice_column(), meta.advice_column()];

        // We also need an instance column to store public inputs.
        let instance = meta.instance_column();

        FieldChip::configure(meta, advice, instance)
    }

    fn synthesize(
        &self,
        config: Self::Config,
        mut layouter: impl Layouter<F>,
    ) -> Result<(), Error> {
        let field_chip = FieldChip::<F>::construct(config);

        // Load our private values into the circuit.
        let a = field_chip.load_private(layouter.namespace(|| "load a"), self.a)?;
        let c = field_chip.is_zero(layouter.namespace(|| "is_zero"), a)?;

        // Expose the result as a public input to the circuit.
        field_chip.expose_public(layouter.namespace(|| "expose c"), c, 0)
    }
}

fn main() {
    use halo2_proofs::dev::MockProver;
    use halo2curves::pasta::Fp;

    let k = 4;

    // good case 0 : input == 0 and output ==1
    let circuit = MyCircuit {
        a: Value::known(Fp::ZERO),
    };
    let public_inputs = vec![Fp::ONE];
    let prover = MockProver::run(k, &circuit, vec![public_inputs]).unwrap();
    assert_eq!(prover.verify(), Ok(()));

    // good case 1 : (input == 2 and output == 0)
    let circuit = MyCircuit {
        a: Value::known(Fp::from(2)),
    };
    let public_inputs = vec![Fp::ZERO];
    let prover = MockProver::run(k, &circuit, vec![public_inputs]).unwrap();
    assert_eq!(prover.verify(), Ok(()));

    // error case 2 : (input == 0 and output == 2)
    // to ensure output is bool
    let circuit = MyCircuit {
        a: Value::known(Fp::ZERO),
    };
    let public_inputs = vec![Fp::from(2)];
    let prover = MockProver::run(k, &circuit, vec![public_inputs]).unwrap();
    assert!(prover.verify().is_err());

    // error case 3: (input == 0 and output == 0)
    // to avoid both input and output is 0
    let circuit = MyCircuit {
        a: Value::known(Fp::ZERO),
    };
    let public_inputs = vec![Fp::ZERO];
    let prover = MockProver::run(k, &circuit, vec![public_inputs]).unwrap();
    assert!(prover.verify().is_err());

    // error case 4: (input == 1 and output == 1)
    let circuit = MyCircuit {
        a: Value::known(Fp::ONE),
    };
    let public_inputs = vec![Fp::ONE];
    let prover = MockProver::run(k, &circuit, vec![public_inputs]).unwrap();
    assert!(prover.verify().is_err());
}
